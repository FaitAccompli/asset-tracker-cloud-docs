name: Test and Release

on: push

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: "14.x"

      - name: Keep npm cache around to speed up installs
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-build-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm ci --no-audit

      - name: Compile TypeScript
        run: npx tsc

      - name: Test
        run: npm test

      - name: Semantic release
        id: semantic-release
        continue-on-error: true
        run: |
          npm i --no-save semantic-release
          npx semantic-release

      - name: Determine documentation release (saga)
        if: github.ref == 'refs/heads/saga' && github.event_name == 'push'
        run: |
          echo "RELEASE=saga" >> $GITHUB_ENV
          VERSION=`git tag --contains ${{ github.sha }} | tr -d '\n'`
          if [[ "${{ env.VERSION }}" == "" ]]; then echo "Version not upgraded."; exit 0; else echo "Updating documentation for version ${{ env.VERSION }}..."; fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Determine documentation release (maintenance branches)
        if: github.ref == 'refs/heads/v1.5x' && github.event_name == 'push'
        run: |
          export RELEASE=`git rev-parse --abbrev-ref HEAD | tr -d '\n'`
          echo "RELEASE=$RELEASE" >> $GITHUB_ENV
          echo "VERSION=$RELEASE" >> $GITHUB_ENV

      - name: Publish Documentation
        if:
          env.RELEASE != '' && env.VERSION != '' && github.event_name == 'push'
        run: |
          echo "Updating documentation for release ${{ env.RELEASE }}...";
          echo "Updating documentation for version ${{ env.VERSION }}...";
          python3 -m pip install --upgrade --user pip setuptools
          python3 -m pip install --upgrade --user sphinx recommonmark sphinx_rtd_theme rstcheck
          export PATH=$PATH:/home/runner/.local/bin
          # Generate Documentation
          make html
          # Clone gh-pages branch
          git clone --single-branch --branch gh-pages https://github.com/${GITHUB_REPOSITORY} asset-tracker-docs
          mv build/html asset-tracker-docs/${{ env.RELEASE }}
          # Publish build
          echo "machine github.com login accesskey password ${GITHUB_TOKEN}" > ~/.netrc
          git config --global user.email "actions@example.com"
          git config --global user.name "GitHub Actions"
          cd asset-tracker-docs
          touch .nojekyll
          git add .nojekyll
          git add -A ${{ env.RELEASE }}
          git commit -m "docs(${{ env.RELEASE }}): update documentation for version ${{ env.VERSION }}"
          git push
